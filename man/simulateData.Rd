% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateData.R
\name{simulateData}
\alias{simulateData}
\title{Simulate Transmission Data}
\usage{
simulateData(n, mu, sigma, pi = 0.5, w = 0.7, kappa = 3)
}
\arguments{
\item{n}{number of data to be generated.}

\item{mu}{mean of the serial interval.}

\item{sigma}{standard deviation of the serial interval.}

\item{pi}{success probability to sample secondary cases. \code{0<pi<=1}.}

\item{w}{probability of non-coprimary transmissions. See "Details".}

\item{kappa}{expected number of contacts per case. If \code{pi > 0}, the expected number
of contacts is modelled by Poisson distribution with mean \code{kappa*pi}.}
}
\value{
A list of data frames which include the epidata and the transmission network.
The epidata includes the following information:
\itemize{
  \item \code{inf.ID,inf.source} case IDs and their sampled infectors. If \code{pi>0},
  the transmission may consist of few intermediate unsampled cases.
  \item \code{inf.times} time when a case developed symptoms.
} \cr
The transmission network includes the following information:
\itemize{
  \item \code{case_i,case_j} infector and infectee IDs.
  \item \code{ti,tj} symptom onset times of the infector and infectee.
  \item \code{onset_diff} observed serial interval, computed by \code{tj-ti}. Assumed to
  be non-negative.
}
}
\description{
Simulate transmission data.
The serial interval between two connected cases are generated
from two distributions: Compound Geometric Gamma (CGG) and Folded Gamma Difference (FGD).
}
\details{
The underlying transmissions in the data are classified as
non-coprimary and coprimary transmissions. The former refers to a direct/indirect
transmission between primary case to his/her sampled secondary case. The latter refers to
a transmission in which both primary and secondary cases were infected by an unseen
(unsampled) case. \code{w} represents the fraction of non-coprimary transmission
in the transmsission network. \cr\cr
}
\examples{
data <- simulateData(100, 4, 2, kappa = 1)
plot(data)
}
